import os

import pandas as pd
import math
import numpy as np

pxtocm = 22.35

def dfProcessingTwo(filename: str, number: int, deg: str) -> pd.DataFrame:
    """This function calcualtes from basedate (csv_file which is read in into a pd.DataFrame) the distance that two bees are walking per frame, the distance the two bees walking per second, If those bees move and the distance that these two bees are apart. It returns a pandas df wich is saved as a csv file in the directory given at the end of the function

    Args:
        filename (str): The filename that needs to be processed in the given directory
        number (int): a unique number (should be generated by a counter) that gives all the datanames uniquness
        deg (str): The degrees with which the experiments were performed (to find the right dataset and to write it into the right directory either 26Degree or 36Degree)

    Returns:
        pd.DataFrame: DataFrame is saves as csv file into the direcoty path/data/processedData/twoBees/deg/
    """
    path = os.path.dirname(os.path.realpath(__file__))

    df = pd.read_csv(os.path.join(os.path.dirname(path), 'data', 'TwoBees', filename))

    #creates a new dataframe were the first line gets deleted and sets the last line as zero then resets the index
    df_new = df.drop(df.index[0])
    df_new.loc[len(df_new)+1] = 0
    df_new.reset_index(inplace=True)

    # writes the angle and radius from time n+1 to the original DataFrame
    df['bee1_r+1'] = df_new['bee1_r']
    df['bee2_r+1'] = df_new['bee2_r']
    df['bee1_p+1'] = df_new['bee1_p']
    df['bee2_p+1'] = df_new['bee2_p']

    # transforms radius data form pixels to cm
    df['bee1_r+1'] = df['bee1_r+1']/pxtocm
    df['bee1_r'] = df['bee1_r']/pxtocm
    df['bee2_r+1'] = df['bee2_r+1']/pxtocm
    df['bee2_r'] = df['bee2_r']/pxtocm

    # calculates angles that the bees were moveing in one timestep and transformes rad to grad
    df['angleGrad1'] = abs(df['bee1_p+1'] - df['bee1_p']) * (180/math.pi)
    df['angleGrad2'] = abs(df['bee2_p+1'] - df['bee2_p']) * (180/math.pi)
    df['angleGrad1'] = df['angleGrad1'].apply(lambda x: 360-x if x > 180 else x)
    df['angleGrad2'] = df['angleGrad2'].apply(lambda x: 360-x if x > 180 else x)

    # calculates least angle between the two bees and transformes it to Grad
    df['angleDistance'] = df.apply(lambda x: calcDistanceAngle(x['bee1_p'], x['bee2_p']), axis=1)
    df['angleDistGrad'] = df['angleDistance'].apply(lambda x: x * (180/math.pi))

    # calcualtes the speed of the two bees
    df['distancePerSec1'] = (((2 * math.pi * df['bee1_r'] * (df['angleGrad1']/360)) + (2 * math.pi * df['bee1_r+1'] * 
    (df['angleGrad1']/360)))/2)/0.2
    df['distancePerSec2'] = (((2 * math.pi * df['bee2_r'] * (df['angleGrad2']/360)) + (2 * math.pi * df['bee2_r+1'] * 
    (df['angleGrad2']/360)))/2)/0.2

    # calculates the distance between the two bees
    df['distBees'] = ((2 * math.pi * df['bee1_r'] * (df['angleDistGrad']/360)) + (2 * math.pi * df['bee2_r'] * 
    (df['angleDistGrad']/360)))/2

    # writes new column were threshold for movement is tranlated to 1 and 0
    df['BeeNotMove1'] = df['distancePerSec1'].apply(lambda x: 1 if x <= 0.35 else 0)
    df['BeeNotMove2'] = df['distancePerSec2'].apply(lambda x: 1 if x <= 0.35 else 0)
    df['meanSpeed'] = (df['distancePerSec1'] + df['distancePerSec2'])/2
    df['distancePerSec1'] = df['distancePerSec1'].apply(lambda x: 0 if x <= 0.35 else x)
    df['distancePerSec2'] = df['distancePerSec2'].apply(lambda x: 0 if x <= 0.35 else x)

    # looks if the bees are below the threshold for consideration of social contact
    df['BeesTogether'] = df['distBees'].apply(lambda x: 1 if x <=2.2 else 0)
    df['socialTogether'] = df.apply(
        lambda x: socialTogether(x['BeeNotMove1'], x['BeeNotMove2'], x['BeesTogether']),
        axis=1
        )
    
    filename = filename.split('.')[0]
    df = df[:-1]

    df.to_csv(os.path.join(
        os.path.dirname(path), 'data', 'processedData', 'TwoBees',  f'{deg}', f'{filename}_processed_{number}.csv'
        ), 
        sep=';', encoding='utf-8') 

def calcDistanceAngle(rad1, rad2):
        angle = abs(rad2 - rad1)

        if angle > math.pi:
            return (2*math.pi) - angle
        elif angle < math.pi:
            return angle

def socialTogether(BeeNotMove1, BeeNotMove2, BeesTogether):
    if BeeNotMove1 == 1 and BeeNotMove2 == 1 and BeesTogether == 1:
        return 1
    else:
        return 0